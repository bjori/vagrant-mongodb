module VagrantMongo
  module Middleware

    class Facter
      def initialize(app, env)
        @app = app
        @env = env
        @vm  = env[:vm]
      end

      def call(env)

        options = @vm.config.mongo.to_hash

        @env[:vm].config.vm.provisioners.each do |provisioner|
          if provisioner.shortcut.to_s == "puppet"

            provisioner.config.facter[:rs_name] = ""
            provisioner.config.facter[:mongo_auth] = options[:auth]

            if options[:rs][:name]
              provisioner.config.facter[:rs_name] = options[:rs][:name]
              provisioner.config.facter[:rs_arbiter] = options[:rs][:arbiter] ? "true" : "false"
            end

          end
        end

        @app.call(env)

      end

    end

    class Hosts
      def initialize(app, env)
        @app = app
        @env = env
        @vm  = env[:vm]
      end

      def call(env)
        hosts = get_hosts_for_replicaset(@vm)
        content = make_file_content(hosts)

        base = get_base_path(@vm)
        filename = write_temp_hostfile(base, content)

        @app.call(env)

        #remove_temp_hostfile(filename)
      end

    def get_hosts_for_replicaset(vm)
      entries = []
      vm.env.vms.each do |name, subvm|
        next if subvm.config.mongo == nil
        next if subvm.config.mongo.rs != vm.config.mongo.rs

        entry = get_host_for(name, subvm)

        entries.push(entry)
      end

      entries
    end

    def get_host_for(name, vm)
        member = {}
        member[:hosts] = vm.config.vm.host_name, name
        vm.config.vm.networks.each do |type, args|
          raise Vagrant::Errors::ConfigValidationFailed unless type == :hostonly
          member[:ip] = args[0]
        end

        member
    end

    def get_base_path(vm)
      vm.config.vm.provisioners.each do |provisioner|
        raise Vagrant::Errors::ConfigValidationFailed unless provisioner.shortcut.to_s == "puppet"
        return provisioner.config.module_path + "/"
      end
    end

    def write_temp_hostfile(base, data)
      f = File.new(base + "hosts/manifests/generated.pp", "w+")
      f.write(data)
      f.path
    end

    def make_file_content(hosts)
      content = "# THIS FILE WAS GENERATED BY MONGO VAGRANT AND WILL BE OVERWRITTEN\n"
      content += "class hosts::generated {\n"

      hosts.each do | entry |
        content += <<EOS
host { '#{entry[:hosts][0]}':
    ensure => 'present',
    ip => '#{entry[:ip]}',
    host_aliases => ['#{entry[:hosts][0]}', '#{entry[:hosts][1]}']
}
EOS

      end
      content += "}\n"

      content
    end

    end
  end
end
